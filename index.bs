<pre class=metadata>
Title: Web Standards Journal
Status: LD
URL: https://domfarolino.com/standards/
Shortname: Standards
Editor: Dominic Farolino, Microsoft https://microsoft.com/, https://domfarolino.com/, domfarolino@gmail.com
Abstract: The production, maintenance, and nuances of web standards can be
Abstract: tough to understand. This document attempts to provide a journal
Abstract: of knowledge I've accumulated throughout my time working on web
Abstract: standards. So far I've contributed to the HTML Standard, the Fetch
Abstract: Standard, Chromium, and am an editor of the Console Standard.
Indent: 2
Editor Term: Author, Authors
Default Ref Status: current
Markup Shorthands: markdown yes
Repository: domfarolino/standards
Default Highlight: javascript
</pre>

<pre class=link-defaults>
spec: url; type: interface; text: URL
</pre>

<pre class=anchors>
urlPrefix: https://heycam.github.io/webidl/; type: dfn; spec: WEBIDL
  text: union type; url: dfn-union-type
  text: es-union
urlPrefix: https://url.spec.whatwg.org/; type: dfn; spec: URL;
  text: stringifier
urlPrefix: https://tc39.github.io/ecma262/#; spec: ECMASCRIPT;
  type: dfn
    text: Essential Internal Methods; url: table-5
    text: 6.1.7.2 Object Internal Methods and Internal Slots; url: sec-object-internal-methods-and-internal-slots
    text: Ordinary Objects; url: ordinary-objects
    text: 9.1 Ordinary Object Internal Methods and Internal Slots; url: sec-ordinary-object-internal-methods-and-internal-slots
    text: Exotic Objects; url: sec-built-in-exotic-object-internal-methods-and-slots
    text: Array Exotic Objects; url: sec-array-exotic-objects
    text: data properties; url: table-2
    text: accessor properties; url: table-3
    text: Function Objects; url: function-object
  type: abstract-op
    text: Get; url: sec-get-o-p
    text: Call; url: sec-call
  type: method
    text: [[Get]]; url: sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver
    text: [[Call]]; url: sec-built-in-function-objects-call-thisargument-argumentslist
</pre>

<h2 id="working-on-fetch-domintro-boxes">Working on Fetch domintro Boxes</h2>

This section focuses on WebIDL <a>union types</a>, the [=es-union=] algorithm, and <a>stringifiers</a>.

<h3 class="heading" id="fetch-accepts-multiple-types-of-input"><a for=/ lt=fetch>Fetch</a> accepting multiple types of input</h3>

While working on the Fetch Standard's domintro boxes ([issue here](https://github.com/whatwg/fetch/issues/543)) I
ran down a few rabbit holes. While reading the description of the <a for=/>request</a> object I noticed it mentioned
that a <a for=/>request</a> is the input to <a for=/>fetch</a>. I had obviously used a regular string as the first
(and sometimes only) parameter to the exposed {{fetch()}} <a method lt=fetch(input)>fetch</a> API, as have many people, so upon reading the spec I was
curious as to how this conversion might take place. I had also vaguely recalled seeing some application code use a
{{URL}} object as input to {{fetch}}, which added to the curiousity.

A member of the WHATWG organization pointed out over IRC that step 2 of the {{fetch()}} in the spec indicated that
whatever we passed in as `input` always went through the {{Request()}} constructor to sort of "sanitize" the input. This
means that the following calls to fetch:

<pre><code class=javascript>
fetch('https://domfarolino.com');
fetch(new URL('https://domfarolino.com'));
fetch(new Request('https://domfarolino.com'));
</code></pre>

Are effectively:

<pre><code class=javascript>
fetch(new Request('https://domfarolino.com'));
fetch(new Request(new URL('https://domfarolino.com')));
fetch(new Request(new Request('https://domfarolino.com')));
</code></pre>

<h3 class="heading" id="the-request-constructor-accepts-multiple-types-of-input">The {{Request()}} constructor accepts multiple types of input</h3>

At this point my confusion about being able to pass in string, {{URL}}, and {{Request}} objects was still with me
but had shifted focus to the {{Request()}} constructor as opposed to the {{fetch()}} API. What specifically in
spec-land allows us to handle this? When looking at the {{Request()}} constructor, I noticed that step 5 handles
the case where |input| is a string, while step 6 handles the case where |input| is a {{Request}} object. So here I
wondered how, if we accept string and {{Request}} objects, are we able to accept something like a {{URL}} object?

<h3 class="heading" id="hello-stringifier">Hello [=stringifier=]</h3>

The short answer is that WebIDL stringifies everything that gets passed into a method taking a {{DOMString}} or {{USVString}}.
The {{URL}} object happens to have a custom <a>stringifier</a> which returns the {{URL}}'s {{URL/href}} attribute upon
string coercian. This is nice because it spits out a type that the {{Request()}} constructor is designed to take.

<h3 class="heading" id="converting-an-ecmascript-value-to-an-idl-union-type">Converting an ECMAScript value to an IDL [=union type=]</h3>

I was then curious as to what stopped {{Request}} objects being passed into the {{Request()}} constructor from undergoing
the same stringification as {{URL}} objects, since the string type is what we first look for. To understand this we have
to look at the WebIDL [=es-union=] algorithm. In short, this algorithm defines the steps to run when we convert an ECMAScript
value to one of several IDL types single targeted type. These types are specified in WebIDL as a <a>union type</a>. The
{{Request}} class IDL in the fetch spec defines its |input| parameter as an object of type {{RequestInfo}}, which
is a union type of {{Request}} or {{USVString}}. The reason {{Request}} objects are not stringified like {{URL}} objects
is due to step 4, substep 1 of the <a>es-union</a> algorithm. In short, this algorithm will favor interface types that
ECMAScript object implements before trying to stringify.

<h2 class="heading" id="utility-of-request-mode-no-cors-and-redirect-manual">Utility of {{Request}} `{"mode": "no-cors"}` and `{"redirect": "manual"}`</h2>

<p class=note>Note, more to come.</p>

<h2 class="heading" id="a-bit-on-ecmascript-object-essential-internal-methods">A bit on ECMAScript Object Essential Internal Methods</h2>

<p class=note>Note, this section may be generalized in the future to include more information on exotic objects, which would warrant the
title of this section changing to `A bit on ECMAScript Object Internal Methods`, with *Essential Internal Methods and Internal Slots* being
a more specific subsection.</p>

<h3 class="heading" id="essential-internal-methods-and-internal-slots">Essential Internal Methods and Internal Slots</h3>

The spec states that the semantics of objects in ECMAScript are specified by algorithms called internal methods. These internal methods
are invoked by other algorithms. Internal slots also exist to give internal state to objects housing them. Both internal methods and slots
are not exposed object properties, as they're internal. Their names are enclosed in square brackets `[[]]`.

A list and description of the [=Essential Internal Methods=] that every object has (implements) can be found under
[=6.1.7.2 Object Internal Methods and Internal Slots=]. What's cool is that a corresponding algorithmic definition for each
[=Essential Internal Method=] (in the context of an [=Ordinary Object=]) can be found in [=9.1 Ordinary Object Internal Methods and Internal Slots=].

That last part about the context of [=Ordinary Objects=] is important because [=Ordinary Objects=] provide the default definition of an
[=Essential Internal Methods=], while [=Exotic Objects=] may provide their own varying definition of some of the [=Essential Internal Methods=]
(among other exotic-specific internal methods). For example, see [=Array Exotic Objects=].

> Array exotic objects provide an alternative definition for the \[[DefineOwnProperty]] internal method.
> Except for that internal method, Array exotic objects provide all of the other essential internal methods as specified in 9.1.

<h3 class="heading" id="get-and-set-on-accessor-properties">\[[Get]] and \[[Set]] on accessor properties</h3>

Before the list of [=Essential Internal Methods=], I noticed the description of property descriptors gave and explained attributes (think of
attributes as internal slots that represent exposed Object properties, in this case, properties of property descriptors) associated with both
[=data properties=] and [=accessor properties=]. It might be a little confusing that \[[Get]] and \[[Set]] attributes were described here before
the \[[Get]] and \[[Set]] [=Essential Internal Methods=]. This made me think "Hmm, that must mean there can be at most like..two (different) \[[Get]]s
performed when accessing a property, right?".

The answer is **yes**, and let's see why. We might want to invoke the [$Get$] abstract operation on some object, thus invoking it's {{[[Get]]}} internal method,
which would encounter a property descriptor. Said property descriptor may further be an accessor property, and if so, it will have a \[[Get]] attribute
(internal slot) whose value is a function, |F|. We'll then want to call |F|.{{[[Call]]}} in order to invoke the getter function to retrieve the value we
should finally return.

<p class=note>Note, {{[[Call]]}} is an [=Essential Internal Method=] that appears only on [=function objects=].</p>

<p class=note>Note, we don't actually call |F|.{{[[Call]]}} directly in {{[[Get]]}}, but instead indirectly do so by first
invoking the [$Call$] abstract operation on |F|. I believe this is a common pattern so that internal methods can remain polymorphic
(for example, the object is exotic and provides its own version of some [=Essential Internal Method=]) but I'm not sure.</p>

This all makes sense, and clears up any confusion that the description of the {{[[Get]]}} [=Essential Internal Method=] might cause:

<img width=100% src="https://user-images.githubusercontent.com/9669289/37074472-0425f4d6-219b-11e8-9086-292aa4e0ba55.png" alt="[[Get]] description">

The bit saying "If any ECMAScript code must be executed to retrieve the property value, ..." might be confusing before realizing that the actual
definition of the {{[[Get]]}} internal method indeed executes a [=function object=] in the case where the key was accociated with an accessor
property.

<!--
<h2 class="heading" id="bikeshed-linking-primer">Bikeshed linking primer</h2>

<p class=note>Note, this section will both consume and expand upon the current
[text](https://github.com/domfarolino/standards#for) explaining Bikeshed's <code>for=/</code> usage.
It is very much a work-in-progress.</p>

<div class=example>
`[=response/url=]`

[=response/url=]
</div>

<div class=example>
`<a for=response>url</a>`

<a for=response>url</a>
</div>

<div class=example>
`{{Response()}}`

{{Response()}}
</div>

<div class=example>
`<code><a for=Response>Response()</a></code>`

<code><a for=Response>Response()</a></code>
</div>

<div class=example>
`<code><a constructor for=Response>Response()</a></code>`

<code><a constructor for=Response>Response()</a></code>
</div>

<div class=example>
{{fetch}} (this automatically links to the definition of type <code>event</code> in the ServiceWorker Specification

{{fetch()}} (putting parens around this restricts the linking to one of the IDL types (interface, method, dictionary, etc)
as the Bikeshed spec points out
[here](https://tabatkins.github.io/bikeshed/#autolinking) (let's take care of this link in the <code>pre class=anchors</code> section :).
Also we should verify this information.
</div>

<div class=example>
<a method lt="fetch(input)">fetch()</a>

<a method lt="fetch(input)" for=WindowOrWorkerGlobalScope>fetch()</a>
</div>
-->
